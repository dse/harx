#!/usr/bin/env perl
use warnings;
use strict;

use File::Basename    qw(dirname fileparse);
use JSON::XS          qw();
use Path::Tiny        qw(path);
use File::Path        qw(make_path remove_tree);
use Sort::Naturally   qw(nsort);
use File::MimeInfo    qw();
use MIME::Base64      qw(decode_base64);
use Getopt::Long      qw();
use File::Glob        qw(:bsd_glob);
use Regexp::Wildcards qw();
use URI               qw();
use URI::Escape       qw(uri_unescape);

our $EXTENSIONS = {
    # File::MimeInfo returns a list of extensions given a mime type
    # but the first one isn't always a good "canonical" one.
    'text/html'                => { ext => 'html' },
    'text/css'                 => { ext => 'css'  },
    'application/javascript'   => { ext => 'js'   },
    'text/javascript'          => { ext => 'js'   },
    'application/x-javascript' => { ext => 'js'   },
    'text/plain'               => { ext => 'txt'  },
    'image/png'                => { ext => 'png'  },
    'application/json'         => { ext => 'json' },
    'image/jpeg'               => { ext => 'jpg'  },
    'image/gif'                => { ext => 'gif'  },
};

use constant INTERNAL_REDIRECT => 307;
use constant SUCCESS_MAX => 399;
use constant RESPONSE_MIN => 100;

our @exclude;
our $verbose;
our @urlPattern;
our $jsonPP;
our $mirror;
our $recurse;

# we have to make a function call like this at somewhere around this
# point in order for future extensions() calls to work.
File::MimeInfo::extensions('text/html');

my $rw = Regexp::Wildcards->new(type => 'unix');

Getopt::Long::Configure('bundling', 'gnu_compat', 'no_ignore_case');
Getopt::Long::GetOptions(
    'r|recurse' => \$recurse,
    'u|url-pattern=s' => \@urlPattern,
    'j|pp|jsonpp|json-pp' => \$jsonPP,
    'v|verbose+' => \$verbose,
    'x|exclude=s' => sub {
        my $ext = lc $_[1];
        $ext =~ s{^\*?\.}{}; # make '*.jpg', '.jpg', and 'jpg' equivalent.
        push(@exclude, $rw->convert($ext));
    },
    'h|help' => sub { usage(); exit(0); },
    'm|mirror' => \$mirror,
);

sub usage { print(<<"END"); }
usage: harx [<option> ...] [<harfile> ...]
options:
    -u, --url-pattern=<pattern>      regular expression
    -x, --exclude=<ext|mimetype>     Exclude file extensions or MIME types.
                                     Accepts wildcards.
    -j, --jsonpp, --json-pp          Reformat JSON responses.
    -v, --verbose                    Increase stderr output.
    -h, --help                       Show this message.
END

@urlPattern = map { qr{$_} } @urlPattern;
my $json = JSON::XS->new()->ascii(1)->pretty(1)->canonical(1);
my $harCounter = 0;
local $/ = undef;               # slurp entire files at once
while (<>) {
    my $dir = harDirname($ARGV);
    cleanup($dir);

    my $indexFilename = "${dir}/00INDEX.txt";
    make_path(dirname($indexFilename));
    my $fhIndex;
    open($fhIndex, '>', $indexFilename) or die("$indexFilename: $!");

    my $o = $json->decode($_);
    my $log = $o->{log};
    my $entries = $log->{entries};
    $entries = [grep { !skipEntry($_) } @$entries];

    my $counter = 0;
    foreach my $entry (@$entries) {
        $entry->{counter} = ++$counter;
        $entry->{dir} = $dir;
        setEntryFileExtension($entry);
        setEntryInitialFilename($entry);
        writeEntryData($entry, $fhIndex);
    }
    close($fhIndex);

    my $header = ($ARGV eq '-') ? '(stdin)' : "[$ARGV]";
    print("[${header}]\n");
    print("    directory = ${dir}\n");
    print("    index     = ${indexFilename}\n");
}

sub indent {
    my ($s, $indentFirstLine, $indentOtherLines) = @_;
    $indentFirstLine //= ' ' x 4;
    $indentOtherLines //= $indentFirstLine;
    $s =~ s{\A}{$indentFirstLine};
    $s =~ s{(?<=.)^}{$indentOtherLines}gms;
    return $s;
}

sub getMimeType {
    my ($mimeType, $url) = @_;
    if ($mimeType eq '' || $mimeType eq 'application/octet-stream') {
        $mimeType = undef;
    }
    if (defined $mimeType) {
        return $mimeType;
    }
    if (defined $url) {
        my $uriObj = URI->new($url);
        my $path = $uriObj->path;
        my $ext = (fileparse($path))[2];
        return File::MimeInfo::mimetype("/thisdirectorydoesnotexist/thisfiledoesnotexist.$ext");
    }
}

sub getFileExtensions {
    my ($mimeType, $url) = @_;
    $mimeType //= getMimeType($mimeType, $url);
    my @ext;
    if (defined $mimeType) {
        push(@ext, grep { defined $_ && $_ ne '' } File::MimeInfo::extensions($mimeType));
    }

    # make sure we have file extension from URL too
    my $uriObj = URI->new($url);
    my $path = $uriObj->path;
    my $ext = (fileparse($path))[2];
    push(@ext, $ext);

    if (defined $mimeType && exists $EXTENSIONS->{$mimeType}) {
        my $primaryExt = $EXTENSIONS->{$mimeType}->{ext};
        if (defined $primaryExt) {
            $primaryExt = '.' . $primaryExt;
        }
        unshift(@ext, $primaryExt);
    }
    return distinct(@ext);
}

sub reencode {
    my ($text) = @_;
    my $o = eval { $json->decode($text); };
    if ($@) {
        my $error = $@;
        die($error);
    }
    return $json->encode($o);
}

sub recurseText {
    my ($text) = @_;
    my $o = eval { $json->decode($text); };
    if ($@) {
        return $text;
    }
    if (!defined $o) {
        return $text;
    }
    return $json->encode(recurse($text));
}

sub recurse {
    my ($obj) = @_;
    if (defined $obj && ref $obj eq '') {
        if ($obj =~ m{\A".*"\z} ||$obj =~ m{\A\[.*\]\z} ||$obj =~ m{\A\{.*\}\z}) {
            my $o = eval { $json->decode($obj) };
            if ($@) {
                warn("decoding failure: $@\n");
                warn("$obj\n");
                return $obj;
            }
            if (!defined $o) {
                warn("decoding failure\n");
                return $obj;
            }
            warn("decoding success\n");
            return recurse($o);
        }
    } elsif (ref $obj eq 'ARRAY') {
        foreach my $k (0 .. $#$obj) {
            my $v = $obj->[$k];
            $v = recurse($v);
            $obj->[$k] = $v;
        }
    } elsif (ref $obj eq 'HASH') {
        foreach my $k (keys %$obj) {
            my $v = $obj->{$k};
            $v = recurse($v);
            $obj->{$k} = $v;
        }
    }
    return $obj;
}

sub cleanup {
    my ($dir) = @_;
    if (-d $dir) {
        # leave files not matching harx-####.xxx alone.
        my @cleanup = (bsd_glob("$dir/response-data/harx-*"),
                       bsd_glob("$dir/harx-*"),
                       bsd_glob("$dir/00INDEX.txt"),
                       bsd_glob("$dir/post-data/post-*"));
        if (scalar @cleanup) {
            warn(sprintf("cleaning up %d files in %s\n", scalar @cleanup, $dir)) if $verbose;
            unlink(@cleanup);
        }
    }
}

sub matchUrl {
    my ($url) = @_;
    foreach my $pattern (@urlPattern) {
        return 1 if $url =~ $pattern;
    }
    return 0;
}

# behavior is undefined if * flag is used.
sub sformat {
    my ($format, %args) = @_;
    my @sprintf_args;
    my $sprintf_format = $format;
    $sprintf_format =~ s{ % \{ ([^\}]*) \} }{
        push(@sprintf_args, $args{$1});
        '%';
    }gxe;
    if (wantarray) {
        return ($sprintf_format, @sprintf_args);
    }
    return sprintf($sprintf_format, @sprintf_args);
}

sub distinct {
    my @values = @_;
    my @distinct;
    my %values;
    foreach my $value (@values) {
        push(@distinct, $value) unless $values{$value};
        $values{$value} = 1;
    }
    return @distinct;
}

sub mimeTypeIsJson {
    my ($mimeType) = @_;
    return ($mimeType eq 'application/json' || $mimeType eq 'application/x-amz-json-1.1');
}

sub formData {
    my ($data) = @_;
    my $obj = {};
    my @data = split('&', $data);
    foreach my $nameValue (@data) {
        my @split = map { uri_unescape($_) } split('=', $nameValue);
        s/\+/ /g for @split;
        my ($name, @values) = @split;
        foreach my $value (@values) {
            if (exists $obj->{$name}) {
                if (ref $obj->{$name} eq 'ARRAY') {
                    push(@{$obj->{$name}}, $value);
                } else {
                    $obj->{$name} = [$obj->{$name}, $value];
                }
            } else {
                $obj->{$name} = $value;
            }
        }
    }
    return $obj;
}

sub skipEntry {
    my ($entry) = @_;
    my $request = $entry->{request};
    my $url = $request->{url};
    if (scalar @urlPattern && !matchUrl($url)) {
        return 1;
    }
    my $response = $entry->{response};
    my $status = $response->{status};
    if ($status == INTERNAL_REDIRECT || $status > SUCCESS_MAX || $status < RESPONSE_MIN) {
        return 1;
    }
    my $content = $response->{content};
    if (!defined $content->{text}) {
        return 1;
    }
    my $mimeType = $content->{mimeType};
    $mimeType = getMimeType($mimeType, $url);
    my @ext = getFileExtensions($mimeType, $url);
    foreach my $rx (@exclude) {
        if ($mimeType =~ $rx) {
            return 1;
        }
        foreach my $ext (@ext) {
            if ($ext =~ $rx) {
                return 1;
            }
        }
    }
    return 0;
}

sub setEntryFileExtension {
    my ($entry) = @_;
    my $request = $entry->{request};
    my $url = $request->{url};
    my $response = $entry->{response};
    my $content = $response->{content};
    my $mimeType = $content->{mimeType};
    $mimeType = getMimeType($mimeType, $url);
    $entry->{mimeType} = $mimeType;
    my @ext = getFileExtensions($mimeType, $url);
    $entry->{ext} = $ext[0];
}

sub setEntryInitialFilename {
    my ($entry) = @_;
    my $url = $entry->{request}->{url};
    my $ext = $entry->{ext};
    my $dir = $entry->{dir};
    my $filename = sprintf('%s/response-data/harx-%04d%s', $dir, $entry->{counter}, $ext // '');
    if ($mirror) {
        my $uri = URI->new($url);
        my $basename = $uri->path;
        $basename =~ s{^/+}{};
        $basename =~ s{/+$}{};
        if ($basename eq '' || $basename eq '/') {
            $basename = 'ROOT';
        }
        my $query = $uri->query;
        if (defined $query && $query ne '') {
            $basename .= '?' . $query;
        }
        $filename = sformat('%{dir}s/response-data/%{scheme}s/%{host_port}s/%{basename}s',
                            dir       => $dir,
                            scheme    => $uri->scheme,
                            host_port => $uri->host_port,
                            basename  => $basename);
    }
    $entry->{filename} = $filename;
    $entry->{dirname} = dirname($filename);
}

sub harDirname {
    my ($argv) = @_;
    my $dirname;
    if ($argv eq '-') {
        return 'stdin.har.d';
    } else {
        $dirname = $argv;
        $dirname =~ s{\.har$}{};
        return "${dirname}.har.d";
    }
}

sub writeEntryData {
    my ($entry, $fhIndex) = @_;

    my $request  = $entry->{request};
    my $method   = $request->{method};
    my $url      = $request->{url};
    my $response = $entry->{response};
    my $status   = $response->{status};
    my $content  = $response->{content};
    my $mimeType = $entry->{mimeType};
    my $ext      = $entry->{ext};
    my $text     = $content->{text};

    my $binary = 0;
    my $encoding = $content->{encoding};
    if (defined $encoding) {
        if ($encoding eq 'base64') {
            $binary = 1;
            $text = decode_base64($text);
        } else {
            warn "WARNING: unrecognized encoding '$encoding': $url\n";
        }
    }
    if ($recurse) {
        $text = recurseText($text);
    }
    if ($jsonPP) {
        if (defined $mimeType) {
            if (($mimeType eq 'application/json' || $mimeType eq 'application/x-amz-json-1.1')) {
                $text = reencode($text);
            }
        } else {
            if ($url =~ m{\.json$}) {
                $text = reencode($text);
            }
        }
    }

    my $filename = $entry->{filename};
    my $dirname = $entry->{dirname};
    if (!-e $dirname) {
        make_path(dirname($filename));
    } elsif (!-d $dirname) {
        die("$dirname: file exists and is not a directory\n");
    }
    if ($binary) {
        path($filename)->spew({ binmode => ':raw' }, $text);
    } else {
        path($filename)->spew($text);
    }

    my $col1len = length(sprintf('%s/response-data/harx-%04d%s', $entry->{dir}, 0, '.xxxxxxxx')); # example string
    printf $fhIndex ("%-*s %-5s %-32s %-7s %s\n",
                     $col1len, $filename, $binary ? '(bin)' : '-', $mimeType, $method, $url);

    if ($method eq 'POST') {
        my $postData = $request->{postData};
        if (defined $postData) {
            my $mimeType = $postData->{mimeType};
            $mimeType =~ s{;.*$}{};
            my $text = $postData->{text};
            if ($jsonPP && mimeTypeIsJson($mimeType)) {
                if ($recurse) {
                    $text = recurseText($text);
                }
                if ($jsonPP) {
                    $text = reencode($text);
                }
            } elsif ($mimeType eq 'application/x-www-form-urlencoded') {
                my $obj = formData($text);
                if ($recurse) {
                    $obj = recurse($obj);
                }
                $text = $json->encode($obj);
            } else {
                print("??? $mimeType\n");
            }
            my ($ext) = getFileExtensions($mimeType);
            my $filename = sprintf('%s/post-data/post-%04d%s', $entry->{dir}, $entry->{counter}, $ext // '');
            make_path(dirname($filename));
            path($filename)->spew($text);
            printf $fhIndex ("%-*s %-5s %-32s %-7s\n", $col1len, $filename, '-', $mimeType, '(data)');
        }
    }
}
